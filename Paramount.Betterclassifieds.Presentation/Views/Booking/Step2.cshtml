@using Paramount
@using Paramount.Betterclassifieds.Presentation.Framework
@model Paramount.Betterclassifieds.Presentation.ViewModels.Booking.Step2View

@{
    ViewBag.Title = "Design Ad";
    Layout = @Url.ClientUrl("~/Views/Shared/_ApplicationLayout.cshtml");
}
<ul class="nav nav-tabs" role="tablist">
    <li>@Html.ActionLink("1", "Step1")</li>
    <li class="active"><a href="#">Step 2</a></li>
    <li class="disabled"><a href="#">3</a></li>
    <li class="disabled"><a href="#">4</a></li>
</ul>


@Html.Partial("_PriceSummary")

<form role="form" id="adDesignForm" action="@Url.Action("Step2", "Booking")" method="POST">
    @Html.AntiForgeryToken()

    <div class="row top-buffer-20">
        <div class="col-xs-12">
            <div class="bs-callout bs-callout-info">
                <h4>Online Ad Details</h4>
                <p>Ok. You might want to entice the readers with an impact heading.</p>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OnlineAdHeading)
                @Html.BootstrapLargeTextBoxFor(m => m.OnlineAdHeading)
                @Html.ValidationMessageFor(m => m.OnlineAdHeading)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OnlineAdDescription)
                @Html.BootstrapLargeTextAreaFor(m => m.OnlineAdDescription, 8)
                @Html.ValidationMessageFor(m => m.OnlineAdDescription)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OnlineAdContactName)
                @Html.BootstrapLargeTextBoxFor(m => m.OnlineAdContactName)
                @Html.ValidationMessageFor(m => m.OnlineAdContactName)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OnlineAdEmail)
                @Html.BootstrapLargeTextBoxFor(m => m.OnlineAdEmail)
                @Html.ValidationMessageFor(m => m.OnlineAdEmail)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OnlineAdPhone)
                @Html.BootstrapLargeTextBoxFor(m => m.OnlineAdPhone)
                @Html.ValidationMessageFor(m => m.OnlineAdPhone)
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OnlineAdLocationId)
                <select id="OnlineAdLocationId" name="OnlineAdLocationId" class="form-control input-lg">
                    @foreach (var location in Model.LocationOptions)
                    {
                        if (Model.OnlineAdLocationId == int.Parse(location.Value))
                        {
                            <option value="@location.Value" selected="selected">@location.Text</option>
                        }
                        else
                        {
                            <option value="@location.Value">@location.Text</option>
                        }
                    }
                </select>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OnlineAdLocationAreaId)
                <select id="OnlineAdLocationAreaId" name="OnlineAdLocationAreaId" class="form-control input-lg">
                    @foreach (var area in Model.LocationAreaOptions)
                    {
                        if (Model.OnlineAdLocationAreaId == int.Parse(area.Value))
                        {
                            <option value="@area.Value" selected="selected">@area.Text</option>
                        }
                        else
                        {
                            <option value="@area.Value">@area.Text</option>
                        }

                    }
                </select>
            </div>

            <div class="panel panel-default" id="onlineImages">
                <div class="panel-heading">
                    <span class="btn btn-success fileinput-button" data-bind="css : { hidden : !maxLimitNotReached() }">
                        <i class="glyphicon glyphicon-plus"></i>
                        <span>Select images...</span>
                        <!-- The file input field used as target for the file upload widget -->
                        <input id="fileupload" type="file" name="files[]" multiple>
                    </span>

                </div>
                <div class="panel-body upload-thumbs">
                    <div class="alert alert-warning">
                        Max image size @Model.MaxImageUploadInMegabytes.ToString("F1") MB.
                        @if (Model.MaxOnlineImages.HasValue)
                        {
                            <span>You can upload up to @Model.MaxOnlineImages images.</span>
                        }
                    </div>
                    <div class="alert alert-danger" data-bind="text : errorMsg, css : { hidden : errorMsg().length == 0 }"></div>
                    <div class="progress progress-striped active" data-bind="visible: uploadImageInProgress">
                        <div class="progress-bar active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;">
                            <span data-bind="visible: uploadImageInProgress">Uploading...</span>
                        </div>
                    </div>

                    <div class="row" data-bind="foreach: adImages">
                        <div class="col-lg-2 col-md-3 col-sm-4 col-xs-6">
                            <div class="thumbnail">
                                <img data-bind="attr: {src: $parent.imageUrl($data) }" />
                                <div class="caption">
                                    <button class="btn btn-warning btn-block" title="Remove" data-bind="click: $parent.removeImage">
                                        <span class="glyphicon glyphicon-trash"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @*line ad details*@
    @if (Model.IsLineAdIncluded)
    {
        <div class="row top-buffer-10">
            <div class="col-xs-12">
                <div class="bs-callout bs-callout-info">
                    <h4>Print Ad Details</h4>
                    <p>These details will be displayed on the selected publications.</p>
                </div>
                <button id="copyOnlineAdDetails"
                        class="btn btn-primary pull-right"
                        data-loading-text="Converting...">
                    Copy From Online Ad <i class="glyphicon glyphicon-arrow-down"></i>
                </button>
            </div>
        </div>

        <div class="row top-buffer-10">
            <div class="col-xs-12">

                <div class="form-group">
                    @Html.LabelFor(m => m.LineAdHeader)
                    @Html.BootstrapLargeTextBoxFor(m => m.LineAdHeader, attributes: new Dictionary<string, object>
                    {
                        {"data-bind", "value: lineAdHeader"}
                    })
                    @Html.ValidationMessageFor(m => m.LineAdHeader)
                    <label>
                        <input type="checkbox"/> Super Bold Heading - make your heading really stand out
                    </label>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.LineAdText)
                    @Html.BootstrapLargeTextAreaFor(m => m.LineAdText, 5, attributes: new Dictionary<string, object>()
                    {
                        {"data-bind", "value: lineAdText, valueUpdate: 'afterkeydown'"}
                    })
                    <span class="help-block">Word Count: <span data-bind="text: wordCount"></span></span>
                    @Html.ValidationMessageFor(m => m.LineAdText)
                </div>
            </div>
        </div>

    }

    @*Pager*@
    <ul class="pager">
        <li class="previous">
            <button id="btnPrev" class="btn btn-large btn-default js-load" data-nav='@Url.Action("Step1")'>
                <i class="glyphicon glyphicon-arrow-left"></i> Previous
            </button>
        </li>
        <li class="next">
            <button id="btnSubmit" type="submit" class="btn btn-large btn-default">Next <i class="glyphicon glyphicon-arrow-right"></i></button>
        </li>
    </ul>

</form>

@section Scripts{
    
    <script src="@Url.Content("~/Scripts/jquery.cleditor.min.js")"></script>
    <script>
        
        (function($, $paramount) {

            $paramount.setOnlineEditor(function() {
                return $('#OnlineAdDescription').cleditor({
                    controls: "bold italic underline strikethrough subscript superscript | font size " +
                        "style | color highlight removeformat | bullets numbering | outdent " +
                        "indent | alignleft center alignright justify | undo redo | " +
                        "rule image link unlink | cut copy paste pastetext",
                    fonts: " Arial,Arial Black,Comic Sans MS,Courier New,Narrow,Garamond," +
                        "Georgia,Impact,Sans Serif,Serif,Tahoma,Trebuchet MS,Verdana",
                    sizes: "1,2,3,4,5,6,7",
                    styles: [["Paragraph", "<p>"], ["Header 3", "<h3>"], ["Header 4", "<h4>"], ["Header 5", "<h5>"], ["Header 6", "<h6>"]],
                    bodyStyle: "margin:4px; font:14pt Arial; cursor:text"
                });
            });

            $(function() {
                var $progressBar = $('#onlineImages .progress');

                $('#OnlineAdLocationId').on('change', function() {
                    $('#OnlineAdLocationAreaId').loadLocationAreas('@Url.Action("GetLocationAreas", "Location")', $(this).val(), false);
                });

                $('#copyOnlineAdDetails').click(function() {
                    var $btn = $(this);
                    $btn.button('loading');
                    $.ajax({
                        url: '@Url.Action("GetPlaintextFromMarkdown", "Booking")',
                        data: JSON.stringify({ markdown: $('#OnlineAdDescriptionMarkdown').val() }),
                        contentType: 'application/json',
                        type: 'POST',
                        dataType: 'json',
                        success: function(response) {
                            designAdModel.lineAdText(response.plaintext);
                            designAdModel.lineAdHeader($('#OnlineAdHeading').val());
                        },
                        complete: function() {
                            $btn.button('reset');
                        }
                    });
                    return false; // So we don't submit form on pressing the button
                });

                // Fix the total price
                //$('#priceSummary').affix({
                //    offset: {
                //        top: 320,
                //        bottom: 450
                //    }
                //}).on('affix.bs.affix', function() {
                //    $(this).css({ top: -20, width: $('.col-xs-12').width(), 'z-index': '100' });
                //}).on('affix-top.bs.affix', function() {
                //    $(this).css({ width: $('.col-xs-12').width() });
                //});

                // Setup upload ctrl
                var upload = $('#fileupload').fileupload({
                    dataType: 'json',
                    url: '@Url.Action("UploadOnlineImage", "Booking")',
                    autoUpload: true,
                    singleFileUploads: false
                });

                upload.on('fileuploaddone', function(e, data) {
                    if (data.result.documentId) {
                        designAdModel.adImages.push(data.result.documentId);
                    } else {
                        designAdModel.errorMsg(data.result.errorMsg);
                    }
                });

                upload.on('fileuploadstart', function(data) {
                    designAdModel.uploadImageInProgress(true);
                });

                upload.on('fileuploadalways', function() {
                    designAdModel.uploadImageInProgress(false);
                    $progressBar.find('.progress-bar').width('0');
                });

                upload.on('fileuploadprogressall', function(e, data) {
                    var progress = parseInt(data.loaded / data.total * 100, 10);
                    $progressBar.find('.progress-bar').css('width', progress + '%');
                });

                upload.on('fileuploadadd', function(e, data) {
                    var acceptFileTypes = /^image\/(gif|jpe?g|png)$/i;
                    if (data.originalFiles[0]['type'].length && !acceptFileTypes.test(data.originalFiles[0]['type'])) {
                        designAdModel.errorMsg('Not an accepted file type.');
                        return false;
                    }

                    if (data.originalFiles[0].size > '@Model.MaxImageUploadBytes') {
                        designAdModel.errorMsg("The file exceeds the maximum file size.");
                        return false;
                    }

                    if (data.files.length > 1) {
                        designAdModel.errorMsg("Please select one image at a time.");
                        return false;
                    }

                    designAdModel.errorMsg("");
                    return true;
                });

                var DesignAd = function(data, maxImages, lineAdHeader, lineAdText) {
                    var self = this;

                    // Images
                    self.adImages = ko.observableArray(data);
                    self.errorMsg = ko.observable("");
                    self.removeImage = function(img) {
                        $.post('@Url.Action("RemoveOnlineImage", "Booking")', { documentId: img }, function(result) {
                            if (result.removed) {
                                self.adImages.remove(img);
                            }
                        });
                        $('#fileupload').removeClass('hidden');
                    };
                    self.maxImages = ko.observable(maxImages);
                    self.maxLimitNotReached = function() {
                        return self.adImages().length < self.maxImages();
                    };
                    self.uploadImageInProgress = ko.observable(false);
                    self.imageUrlTemplate = '@Url.Action("Render", "Image", new {documentId = "id", height = 100, width = 100})';
                    self.imageUrl = function(id) {
                        return self.imageUrlTemplate.replace('id', id);
                    };

                    self.pricelist = ko.observable({ Total: 0, LineItems: { 'Online Ad Cost': 0 } });
                    self.calculate = ko.computed(function() {
                        $.get('@Url.Action("GetRate")', null, function(resp) {
                            self.pricelist(resp);
                        });
                    });
                    self.lineAdHeader = ko.observable(lineAdHeader);
                    self.lineAdText = ko.observable(lineAdText);
                    self.wordCount = ko.computed(function() {
                        return self.lineAdText().split(' ').length;
                    });
                };

                var rawOnlineImages = @Html.Raw(Model.OnlineAdImages.ToJsonString());

                var designAdModel = new DesignAd(rawOnlineImages, @Model.MaxOnlineImages,
                    '@Model.LineAdHeader', '@Model.LineAdText');

                ko.applyBindings(designAdModel);
            });
        })(jQuery, $paramount);
    </script>
}