@using Paramount
@using Paramount.Betterclassifieds.Configuration
@using Paramount.Betterclassifieds.Presentation.Services
@using Paramount.Utility

@{
    var clientConfig = ClientConfigService.Instance;

    var brand = ConfigManager.ReadAppSetting<string>("Brand");
    var environment = ConfigManager.ReadAppSetting<string>("Environment");
    var googleTrackingId = ConfigManager.ReadAppSetting<string>("GoogleTrackingId");
    var membership = Membership.GetUser();
    var email = membership != null ? membership.Email : null;
    var emailHash = email != null ? ParamountEncryption.GetMd5Hash(email) : null;
}


@*Third party*@
@Scripts.Render("~/bundle/ko")
@Scripts.Render("~/bundle/vendor")
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyDByEFZclrcbWS4XL-nuA1mdWZwwmHR71U"></script>
<script src="@Url.Content("~/Scripts/ckeditor/ckeditor.js")"></script>
<script src="@Url.Content("~/Scripts/paramount-googleTacking.js")"></script>

@*Outgoing Urls based on the MVC routes*@
<script>
    var $paramount = (function (me, $) {

        function call(type, url, data) {
            if (typeof data !== "string") {
                data = JSON.stringify(data);
            }

            return $.ajax({
                url: url,
                data: data,
                type: type,
                dataType: 'json',
                contentType: 'application/json'
            });
        }

        me.baseUrl = '@Url.Home().WithFullUrl()';
        
        me.httpPost = function (url, data) {

            $('#serverValidation').hide();
            var promise = call('POST', url, data);
            promise.then(function(resp) {
                if (resp.nextUrl) {
                    window.location = resp.nextUrl;
                    return;
                } else {
                    $('[data-loading-text]').button('reset');
                }

                if (resp.errors) {
                    // Reset any button
                    $('[data-loading-text]').button('reset');
                    var errors = [];

                    // Flatten all the server errors
                    _.forEach(resp.errors, function(err) {
                        _.forEach(err.value, function(msg) {
                            errors.push(msg);
                        });
                    });

                    var $errorContainer = $('#serverValidation > .alert-danger');

                    if ($errorContainer.length > 0) {
                        $errorContainer.empty();
                        $('#serverValidation').show();

                        _.forEach(errors, function(e) {
                            $errorContainer.append('<span>' + e + '</span><br />');
                        });

                    } else {
                        _.forEach(errors, function(e) {
                            toastr.error(e);
                        });
                    }

                    return;
                }

            }).fail(function() {
                $('[data-loading-text]').button('reset');
            });
            return promise;
        }
        me.httpGet = function (url, data) {
            return call('GET', url, data);
        }

        /*
        *   Initialise the google analytics
        */

        var getConfigContext = function () {
            return '@string.Format("{0}{1}", brand, environment).ToLower()';
        };

        var getTrackingId = function () {
            return '@googleTrackingId';
        }

        var getEmailHash = function () {
            return '@emailHash';
        }

        me.config = {
            brand: '@brand',
            configContext: getConfigContext(),
            analytics: { trackingId: getTrackingId() },
            emailHash: getEmailHash()
        };

        //run initn methods
        registerGa(getTrackingId());


        return me;

    })($paramount || {}, jQuery);


</script>

<script>
    window.fbAsyncInit = function () {
        FB.init({
            appId: '@clientConfig.FacebookAppId',
            xfbml: true,
            version: 'v2.5'
        });
    };

    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {
            return;
        }
        js = d.createElement(s);
        js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
</script>

@*Paramount scripts*@
@Scripts.Render("~/bundle/paramount-app")

