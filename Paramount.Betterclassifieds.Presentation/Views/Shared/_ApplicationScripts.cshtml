@using Paramount
@using Paramount.ApplicationBlock.Configuration

@{
    var brand = ConfigManager.ReadAppSetting<string>("Brand");
    var environment = ConfigManager.ReadAppSetting<string>("Environment");
    var googleTrackingId = ConfigManager.ReadAppSetting<string>("GoogleTrackingId");
}

@*Third party*@
@Scripts.Render("~/bundle/jquery-modules")
@Scripts.Render("~/bundle/bootstrap")
@Scripts.Render("~/bundle/ko")
@Scripts.Render("~/bundle/components")
<script src="@Url.Content("~/Scripts/ckeditor/ckeditor.js")"></script>
<script src="@Url.Content("~/Scripts/paramount-googleTacking.js")"></script>

@*Outgoing Urls based on the MVC routes*@
<script>
    var $paramount = (function (me) {

        me.url = {};
        me.url.home = '@Url.Home()';
        me.url.locations = {
            getLocationAreas: '@Url.LocationAreaOptions()'
        }

        me.url.userads = {
            editAdDetails: function (id) {
                return '@Url.Action("Details", "EditAd", new {id = -1})'.replace('-1', id);
            },
            viewAd: function (id) {
                return '@Url.Action("ViewAd", "Listings", new { Id = -1 })'.replace('-1', id);
            }
        }

        // Endpoints for managing images regardless of context
        me.url.manageImg = {
            cropImage: '@Url.CropImage()',
            uploadCropImage: '@Url.ImageUpload()',
            imgThumb: '@Url.Image("-1")',
            cancelCropImage: '@Url.CancelCrop()',
            renderCropImage: '@Url.RenderCropImage()'
        };

        // Endpoints for managing existing ad
        me.url.adManagement = {
            assignPrintImgUrl: '@Url.Action("AssignLineAdImage", "EditAd")',
            removePrintImgUrl: '@Url.Action("RemoveLineAdImage", "EditAd")',
            removeOnlineAdImage: '@Url.Action("RemoveOnlineImage", "EditAd")',
            uploadOnlineImage: '@Url.UploadOnlineImage()',
            assignOnlineImageUrl: '@Url.Action("AssignOnlineImage", "EditAd")',
            bookingInvoiceUrl: function (bookingId) {
                return '@Url.BookingInvoice()' + '/' + bookingId;
            },
            getEventDetails : '@Url.Action("GetEventDetails", "Booking")'
        }

        // Endpoints for managing ad during booking
        me.url.adBooking = {
            stepOne: '@Url.Action("Step1", "Booking")',
            updateBookingRates: '@Url.UpdateBookingRates()',
            previewBookingEditions: '@Url.PreviewBookingEditions()',
            assignPrintImgUrl: '@Url.SetLineAdImageId()',
            removePrintImgUrl: '@Url.RemoveLineAdImage()',
            removeOnlineAdImage: '@Url.RemoveOnlineImage()',
            uploadOnlineImage: '@Url.UploadOnlineImage()',
            assignOnlineImageUrl: '@Url.Action("AssignOnlineImage", "Booking")',
            getEventDetails: '@Url.Action("GetEventDetails", "Booking")'
        };

        me.url.categories = {
            get: function (parentId) {
                var url = '@Url.Action("GetCategories", "Categories")';
                if (parentId) {
                    url += '?parentId=' + parentId;
                }
                return url;
            },
            isOnlineOnly: '@Url.Action("IsOnlineOnlyCategory", "Categories")'
        }



        /*
        *   Initialise the google analytics
        */

        var getConfigContext = function () {
            return '@string.Format("{0}{1}", brand, environment).ToLower()';
        };

        var getTrackingId = function () {
            return '@googleTrackingId';
        }

        me.config = {
            brand: '@brand',
            configContext: getConfigContext(),
            analytics: { trackingId: getTrackingId() }
        };
        
        //run initn methods
        registerGa(getTrackingId());


        return me;

    })($paramount || {});


</script>

@*Paramount scripts*@
@Scripts.Render("~/bundle/paramount-gl")

