@using Paramount
@using Paramount.ApplicationBlock.Configuration
@using Paramount.Utility

@{
    var brand = ConfigManager.ReadAppSetting<string>("Brand");
    var environment = ConfigManager.ReadAppSetting<string>("Environment");
    var googleTrackingId = ConfigManager.ReadAppSetting<string>("GoogleTrackingId");
    var membership = Membership.GetUser();
    var email = membership != null ? membership.Email : null;
    var emailHash = email != null ? ParamountEncryption.GetMd5Hash(email) : null;
}


@*Third party*@
@Scripts.Render("~/bundle/ko")
@Scripts.Render("~/bundle/vendor")
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
<script src="@Url.Content("~/Scripts/ckeditor/ckeditor.js")"></script>
<script src="@Url.Content("~/Scripts/paramount-googleTacking.js")"></script>

@*Outgoing Urls based on the MVC routes*@
<script>
    var $paramount = (function (me, $) {
        me.baseUrl = '@Url.Home()';
        me.httpPost = function(url, data) {
            return $.ajax({
                url: url,
                data: data,
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json'
            });
        }
        
        me.url = {};
      
        // Endpoints for managing existing ad
        me.url.adManagement = {
            assignPrintImgUrl: '@Url.Action("AssignLineAdImage", "EditAd")',
            removePrintImgUrl: '@Url.Action("RemoveLineAdImage", "EditAd")',
            removeOnlineAdImage: '@Url.Action("RemoveOnlineImage", "EditAd")',
            uploadOnlineImage: '@Url.UploadOnlineImage()',
            assignOnlineImageUrl: '@Url.Action("AssignOnlineImage", "EditAd")',
        }

        // Endpoints for managing ad during booking
        me.url.adBooking = {
            stepOne: '@Url.Action("Step1", "Booking")',
            updateBookingRates: '@Url.UpdateBookingRates()',
            previewBookingEditions: '@Url.PreviewBookingEditions()',
            assignPrintImgUrl: '@Url.SetLineAdImageId()',
            removePrintImgUrl: '@Url.RemoveLineAdImage()',
            removeOnlineAdImage: '@Url.RemoveOnlineImage()',
            uploadOnlineImage: '@Url.UploadOnlineImage()',
            assignOnlineImageUrl: '@Url.Action("AssignOnlineImage", "Booking")',
            getEventDetails: '@Url.Action("GetEventDetails", "Booking")',
            updateEvent: '@Url.Action("UpdateEventDetails", "Booking")'
        };

        me.url.categories = {
            get: function (parentId) {
                var url = '@Url.Action("GetCategories", "Categories")';
                if (parentId) {
                    url += '?parentId=' + parentId;
                }
                return url;
            },
            isOnlineOnly: '@Url.Action("IsOnlineOnlyCategory", "Categories")'
        }



        /*
        *   Initialise the google analytics
        */

        var getConfigContext = function () {
            return '@string.Format("{0}{1}", brand, environment).ToLower()';
        };

        var getTrackingId = function () {
            return '@googleTrackingId';
        }

        var getEmailHash = function() {
            return '@emailHash';
        }

        me.config = {
            brand: '@brand',
            configContext: getConfigContext(),
            analytics: { trackingId: getTrackingId() },
            emailHash: getEmailHash()
        };
        
        //run initn methods
        registerGa(getTrackingId());


        return me;

    })($paramount || {}, jQuery);


</script>

@*Paramount scripts*@
@Scripts.Render("~/bundle/paramount-app")

