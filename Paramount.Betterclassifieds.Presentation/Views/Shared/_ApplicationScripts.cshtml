@using Paramount
@using Paramount.Betterclassifieds.Configuration
@using Paramount.Utility

@{
    var brand = ConfigManager.ReadAppSetting<string>("Brand");
    var environment = ConfigManager.ReadAppSetting<string>("Environment");
    var googleTrackingId = ConfigManager.ReadAppSetting<string>("GoogleTrackingId");
    var membership = Membership.GetUser();
    var email = membership != null ? membership.Email : null;
    var emailHash = email != null ? ParamountEncryption.GetMd5Hash(email) : null;
}


@*Third party*@
@Scripts.Render("~/bundle/ko")
@Scripts.Render("~/bundle/vendor")
<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
<script src="@Url.Content("~/Scripts/ckeditor/ckeditor.js")"></script>
<script src="@Url.Content("~/Scripts/paramount-googleTacking.js")"></script>

@*Outgoing Urls based on the MVC routes*@
<script>
    var $paramount = (function (me, $) {

        function call(type, url, data) {

            if (typeof data !== "string") {
                data = JSON.stringify(data);
            }

            return $.ajax({
                url: url,
                data: data,
                type: type,
                dataType: 'json',
                contentType: 'application/json'
            });
        }

        me.baseUrl = '@Url.Home()';
        $('#serverValidation').hide();
        me.httpPost = function (url, data) {
            var promise = call('POST', url, data);
            promise.then(function (resp) {
                if (resp.nextUrl) {
                    window.location = resp.nextUrl;
                        return;
                }
                if (resp.errors) {
                    var $errorContainer = $('#serverValidation > .alert-danger');
                    $errorContainer.empty();
                    $.each(resp.errors, function (i1, err) {
                        $.each(err.value, function(i2, msg) {
                            $errorContainer.append('<span>' + msg + '</span><br>');
                        });
                    });
                    $('#serverValidation').show();
                    return;
                }
            });
            return promise;
        }
        me.httpGet = function (url, data) {
            return call('GET', url, data);
        }

        /*
        *   Initialise the google analytics
        */

        var getConfigContext = function () {
            return '@string.Format("{0}{1}", brand, environment).ToLower()';
        };

        var getTrackingId = function () {
            return '@googleTrackingId';
        }

        var getEmailHash = function () {
            return '@emailHash';
        }

        me.config = {
            brand: '@brand',
            configContext: getConfigContext(),
            analytics: { trackingId: getTrackingId() },
            emailHash: getEmailHash()
        };

        //run initn methods
        registerGa(getTrackingId());


        return me;

    })($paramount || {}, jQuery);


</script>

@*Paramount scripts*@
@Scripts.Render("~/bundle/paramount-app")

