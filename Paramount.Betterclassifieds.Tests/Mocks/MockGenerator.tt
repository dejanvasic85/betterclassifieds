<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="$(SolutionDir)\Paramount.Betterclassifieds.Business\bin\Debug\Paramount.Betterclassifieds.Business.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Paramount.Betterclassifieds.Tests.Mocks" #>
<#@ import namespace="Paramount.Betterclassifieds.Business" #>

<#@ output extension=".cs" #>
<#
	var typesToGenerate = new Dictionary<string, string> 
	{
		{ "Paramount.Betterclassifieds.Business.Address",  "Address" },
		{ "Paramount.Betterclassifieds.Business.RegistrationModel",  "RegistrationModel" },
		{ "Paramount.Betterclassifieds.Business.OnlineAdRate",  "OnlineAdRate" },
		{ "Paramount.Betterclassifieds.Business.RateModel",  "RateModel" },
		{ "Paramount.Betterclassifieds.Business.AdEnquiry",  "AdEnquiry" },
		{ "Paramount.Betterclassifieds.Business.ApplicationUser",  "ApplicationUser" },
		{ "Paramount.Betterclassifieds.Business.UserNetworkModel",  "UserNetworkModel" },

		{ "Paramount.Betterclassifieds.Business.Search.AdSearchResult",  "AdSearchResult" },		
		{ "Paramount.Betterclassifieds.Business.Booking.AdBookingModel",  "AdBookingModel" },
		
		{ "Paramount.Betterclassifieds.Business.Events.EventModel",  "EventModel" },
		{ "Paramount.Betterclassifieds.Business.Events.EventTicket",  "EventTicket" },
		{ "Paramount.Betterclassifieds.Business.Events.EventBookingTicket",  "EventBookingTicket" },
		{ "Paramount.Betterclassifieds.Business.Events.EventBookingTicketField",  "EventBookingTicketField" },
		{ "Paramount.Betterclassifieds.Business.Events.EventBookingTicketValidation",  "EventBookingTicketValidation" },
		{ "Paramount.Betterclassifieds.Business.Events.EventBooking",  "EventBooking" },
		{ "Paramount.Betterclassifieds.Business.Events.EventTicketReservation",  "EventTicketReservation" }	,	
		{ "Paramount.Betterclassifieds.Business.Events.EventGuestDetails",  "EventGuestDetails" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventPaymentSummary",  "EventPaymentSummary" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventPaymentRequest",  "EventPaymentRequest" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventTicketField",  "EventTicketField" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventInvitation",  "EventInvitation" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventGroup",  "EventGroup" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventOrganiser",  "EventOrganiser" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventSeat",  "EventSeat" },	
		{ "Paramount.Betterclassifieds.Business.Events.EventPromoCode",  "EventPromoCode" },	
		
	};
#>
using Paramount.Betterclassifieds.Business;
using Paramount.Betterclassifieds.Business.Booking;
using Paramount.Betterclassifieds.Business.Events;
using Paramount.Betterclassifieds.Business.Payment;
using Paramount.Betterclassifieds.Business.Search;
using System;
using System.Collections.Generic;

namespace Paramount.Betterclassifieds.Tests
{
	///
	/// Auto-Generated code. See MockGenerator.tt. All classes should be partial, so you can extend the methods for each!
	///
<#
	foreach( var target in typesToGenerate ) 
	{
#>

	internal partial class <#= target.Value #>MockBuilder : MockBuilder<<#= target.Value#>MockBuilder, <#= target.Value #>>
	{	
<# 
		var type = typeof(Paramount.Betterclassifieds.Business.Booking.AdBookingModel).Assembly.GetType(target.Key); 
   		var props = type.GetProperties(BindingFlags.Public|BindingFlags.Instance);

		foreach( var prop in props ) {
			if( !prop.CanWrite || prop.GetSetMethod() == null )
				continue;
			
			var propType = prop.PropertyType;
			var propTypeName = GetDisplayName(propType);

#>
		public <#= target.Value#>MockBuilder With<#=prop.Name#>(<#=propTypeName#> val)
		{ 
			return WithBuildStep(p => p.<#=prop.Name#> = val);
		}
<#		
		} // End of foreach( var prop in props )
#>
	}
<#
	} // End foreach( var target in typesToGenerate )
#>
}


<#+

	// Methods available for the T4 generator
 public string GetDisplayName(Type t)
        {
            if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Nullable<>))
                return string.Format("{0}?", GetDisplayName(t.GetGenericArguments()[0]));
            if (t.IsGenericType)
                return string.Format("{0}<{1}>",
                                     t.Name.Remove(t.Name.IndexOf('`')),
                                     string.Join(",", t.GetGenericArguments().Select(at => GetDisplayName(at))));
            if (t.IsArray)
                return string.Format("{0}[{1}]",
                                     GetDisplayName(t.GetElementType()),
                                     new string(',', t.GetArrayRank() - 1));
            return t.Name;
        }
#>