#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Paramount.DataService.LinqObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ParamountCore")]
	internal partial class BannerDatabaseModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBannerReference(BannerReference instance);
    partial void UpdateBannerReference(BannerReference instance);
    partial void DeleteBannerReference(BannerReference instance);
    partial void InsertBannerReferenceType(BannerReferenceType instance);
    partial void UpdateBannerReferenceType(BannerReferenceType instance);
    partial void DeleteBannerReferenceType(BannerReferenceType instance);
    partial void InsertBannerFileType(BannerFileType instance);
    partial void UpdateBannerFileType(BannerFileType instance);
    partial void DeleteBannerFileType(BannerFileType instance);
    partial void InsertBannerGroup(BannerGroup instance);
    partial void UpdateBannerGroup(BannerGroup instance);
    partial void DeleteBannerGroup(BannerGroup instance);
    partial void InsertBanner(Banner instance);
    partial void UpdateBanner(Banner instance);
    partial void DeleteBanner(Banner instance);
    partial void InsertBannerAudit(BannerAudit instance);
    partial void UpdateBannerAudit(BannerAudit instance);
    partial void DeleteBannerAudit(BannerAudit instance);
    #endregion
		
		public BannerDatabaseModelDataContext() : 
				base(global::Paramount.DataService.Properties.Settings.Default.ParamountCoreConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BannerDatabaseModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BannerDatabaseModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BannerDatabaseModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BannerDatabaseModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BannerReference> BannerReferences
		{
			get
			{
				return this.GetTable<BannerReference>();
			}
		}
		
		public System.Data.Linq.Table<BannerReferenceType> BannerReferenceTypes
		{
			get
			{
				return this.GetTable<BannerReferenceType>();
			}
		}
		
		public System.Data.Linq.Table<BannerFileType> BannerFileTypes
		{
			get
			{
				return this.GetTable<BannerFileType>();
			}
		}
		
		public System.Data.Linq.Table<BannerGroup> BannerGroups
		{
			get
			{
				return this.GetTable<BannerGroup>();
			}
		}
		
		public System.Data.Linq.Table<Banner> Banners
		{
			get
			{
				return this.GetTable<Banner>();
			}
		}
		
		public System.Data.Linq.Table<BannerAudit> BannerAudits
		{
			get
			{
				return this.GetTable<BannerAudit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannerReference")]
	public partial class BannerReference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BannerReferenceId;
		
		private System.Nullable<int> _BannerReferenceTypeId;
		
		private System.Nullable<System.Guid> _BannerId;
		
		private string _Value;
		
		private EntityRef<BannerReferenceType> _BannerReferenceType;
		
		private EntityRef<Banner> _Banner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerReferenceIdChanging(int value);
    partial void OnBannerReferenceIdChanged();
    partial void OnBannerReferenceTypeIdChanging(System.Nullable<int> value);
    partial void OnBannerReferenceTypeIdChanged();
    partial void OnBannerIdChanging(System.Nullable<System.Guid> value);
    partial void OnBannerIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public BannerReference()
		{
			this._BannerReferenceType = default(EntityRef<BannerReferenceType>);
			this._Banner = default(EntityRef<Banner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerReferenceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BannerReferenceId
		{
			get
			{
				return this._BannerReferenceId;
			}
			set
			{
				if ((this._BannerReferenceId != value))
				{
					this.OnBannerReferenceIdChanging(value);
					this.SendPropertyChanging();
					this._BannerReferenceId = value;
					this.SendPropertyChanged("BannerReferenceId");
					this.OnBannerReferenceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerReferenceTypeId", DbType="Int")]
		public System.Nullable<int> BannerReferenceTypeId
		{
			get
			{
				return this._BannerReferenceTypeId;
			}
			set
			{
				if ((this._BannerReferenceTypeId != value))
				{
					if (this._BannerReferenceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBannerReferenceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BannerReferenceTypeId = value;
					this.SendPropertyChanged("BannerReferenceTypeId");
					this.OnBannerReferenceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BannerId
		{
			get
			{
				return this._BannerId;
			}
			set
			{
				if ((this._BannerId != value))
				{
					if (this._Banner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBannerIdChanging(value);
					this.SendPropertyChanging();
					this._BannerId = value;
					this.SendPropertyChanged("BannerId");
					this.OnBannerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(255)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BannerReferenceType_BannerReference", Storage="_BannerReferenceType", ThisKey="BannerReferenceTypeId", OtherKey="BannerReferenceTypeId", IsForeignKey=true)]
		public BannerReferenceType BannerReferenceType
		{
			get
			{
				return this._BannerReferenceType.Entity;
			}
			set
			{
				BannerReferenceType previousValue = this._BannerReferenceType.Entity;
				if (((previousValue != value) 
							|| (this._BannerReferenceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BannerReferenceType.Entity = null;
						previousValue.BannerReferences.Remove(this);
					}
					this._BannerReferenceType.Entity = value;
					if ((value != null))
					{
						value.BannerReferences.Add(this);
						this._BannerReferenceTypeId = value.BannerReferenceTypeId;
					}
					else
					{
						this._BannerReferenceTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BannerReferenceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Banner_BannerReference", Storage="_Banner", ThisKey="BannerId", OtherKey="BannerId", IsForeignKey=true)]
		public Banner Banner
		{
			get
			{
				return this._Banner.Entity;
			}
			set
			{
				Banner previousValue = this._Banner.Entity;
				if (((previousValue != value) 
							|| (this._Banner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Banner.Entity = null;
						previousValue.BannerReferences.Remove(this);
					}
					this._Banner.Entity = value;
					if ((value != null))
					{
						value.BannerReferences.Add(this);
						this._BannerId = value.BannerId;
					}
					else
					{
						this._BannerId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Banner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannerReferenceType")]
	public partial class BannerReferenceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BannerReferenceTypeId;
		
		private string _Title;
		
		private EntitySet<BannerReference> _BannerReferences;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerReferenceTypeIdChanging(int value);
    partial void OnBannerReferenceTypeIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public BannerReferenceType()
		{
			this._BannerReferences = new EntitySet<BannerReference>(new Action<BannerReference>(this.attach_BannerReferences), new Action<BannerReference>(this.detach_BannerReferences));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerReferenceTypeId", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BannerReferenceTypeId
		{
			get
			{
				return this._BannerReferenceTypeId;
			}
			set
			{
				if ((this._BannerReferenceTypeId != value))
				{
					this.OnBannerReferenceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BannerReferenceTypeId = value;
					this.SendPropertyChanged("BannerReferenceTypeId");
					this.OnBannerReferenceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BannerReferenceType_BannerReference", Storage="_BannerReferences", ThisKey="BannerReferenceTypeId", OtherKey="BannerReferenceTypeId")]
		public EntitySet<BannerReference> BannerReferences
		{
			get
			{
				return this._BannerReferences;
			}
			set
			{
				this._BannerReferences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BannerReferences(BannerReference entity)
		{
			this.SendPropertyChanging();
			entity.BannerReferenceType = this;
		}
		
		private void detach_BannerReferences(BannerReference entity)
		{
			this.SendPropertyChanging();
			entity.BannerReferenceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannerFileType")]
	public partial class BannerFileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BannerFileTypeId;
		
		private string _Code;
		
		private string _Title;
		
		private EntitySet<BannerGroup> _BannerGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerFileTypeIdChanging(int value);
    partial void OnBannerFileTypeIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public BannerFileType()
		{
			this._BannerGroups = new EntitySet<BannerGroup>(new Action<BannerGroup>(this.attach_BannerGroups), new Action<BannerGroup>(this.detach_BannerGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerFileTypeId", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int BannerFileTypeId
		{
			get
			{
				return this._BannerFileTypeId;
			}
			set
			{
				if ((this._BannerFileTypeId != value))
				{
					this.OnBannerFileTypeIdChanging(value);
					this.SendPropertyChanging();
					this._BannerFileTypeId = value;
					this.SendPropertyChanged("BannerFileTypeId");
					this.OnBannerFileTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BannerFileType_BannerGroup", Storage="_BannerGroups", ThisKey="Code", OtherKey="AcceptedFileType")]
		public EntitySet<BannerGroup> BannerGroups
		{
			get
			{
				return this._BannerGroups;
			}
			set
			{
				this._BannerGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BannerGroups(BannerGroup entity)
		{
			this.SendPropertyChanging();
			entity.BannerFileType = this;
		}
		
		private void detach_BannerGroups(BannerGroup entity)
		{
			this.SendPropertyChanging();
			entity.BannerFileType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannerGroup")]
	public partial class BannerGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BannerGroupId;
		
		private string _ClientCode;
		
		private string _Title;
		
		private System.Nullable<int> _Height;
		
		private System.Nullable<int> _Width;
		
		private string _AcceptedFileType;
		
		private System.Nullable<bool> _IsTimerEnabled;
		
		private bool _IsActive;
		
		private EntitySet<Banner> _Banners;
		
		private EntityRef<BannerFileType> _BannerFileType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerGroupIdChanging(System.Guid value);
    partial void OnBannerGroupIdChanged();
    partial void OnClientCodeChanging(string value);
    partial void OnClientCodeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnHeightChanging(System.Nullable<int> value);
    partial void OnHeightChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    partial void OnAcceptedFileTypeChanging(string value);
    partial void OnAcceptedFileTypeChanged();
    partial void OnIsTimerEnabledChanging(System.Nullable<bool> value);
    partial void OnIsTimerEnabledChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public BannerGroup()
		{
			this._Banners = new EntitySet<Banner>(new Action<Banner>(this.attach_Banners), new Action<Banner>(this.detach_Banners));
			this._BannerFileType = default(EntityRef<BannerFileType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerGroupId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BannerGroupId
		{
			get
			{
				return this._BannerGroupId;
			}
			set
			{
				if ((this._BannerGroupId != value))
				{
					this.OnBannerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._BannerGroupId = value;
					this.SendPropertyChanged("BannerGroupId");
					this.OnBannerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientCode", DbType="VarChar(10)")]
		public string ClientCode
		{
			get
			{
				return this._ClientCode;
			}
			set
			{
				if ((this._ClientCode != value))
				{
					this.OnClientCodeChanging(value);
					this.SendPropertyChanging();
					this._ClientCode = value;
					this.SendPropertyChanged("ClientCode");
					this.OnClientCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Int")]
		public System.Nullable<int> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedFileType", DbType="NVarChar(5)")]
		public string AcceptedFileType
		{
			get
			{
				return this._AcceptedFileType;
			}
			set
			{
				if ((this._AcceptedFileType != value))
				{
					if (this._BannerFileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcceptedFileTypeChanging(value);
					this.SendPropertyChanging();
					this._AcceptedFileType = value;
					this.SendPropertyChanged("AcceptedFileType");
					this.OnAcceptedFileTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTimerEnabled", DbType="Bit")]
		public System.Nullable<bool> IsTimerEnabled
		{
			get
			{
				return this._IsTimerEnabled;
			}
			set
			{
				if ((this._IsTimerEnabled != value))
				{
					this.OnIsTimerEnabledChanging(value);
					this.SendPropertyChanging();
					this._IsTimerEnabled = value;
					this.SendPropertyChanged("IsTimerEnabled");
					this.OnIsTimerEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BannerGroup_Banner", Storage="_Banners", ThisKey="BannerGroupId", OtherKey="BannerGroupId")]
		public EntitySet<Banner> Banners
		{
			get
			{
				return this._Banners;
			}
			set
			{
				this._Banners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BannerFileType_BannerGroup", Storage="_BannerFileType", ThisKey="AcceptedFileType", OtherKey="Code", IsForeignKey=true)]
		public BannerFileType BannerFileType
		{
			get
			{
				return this._BannerFileType.Entity;
			}
			set
			{
				BannerFileType previousValue = this._BannerFileType.Entity;
				if (((previousValue != value) 
							|| (this._BannerFileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BannerFileType.Entity = null;
						previousValue.BannerGroups.Remove(this);
					}
					this._BannerFileType.Entity = value;
					if ((value != null))
					{
						value.BannerGroups.Add(this);
						this._AcceptedFileType = value.Code;
					}
					else
					{
						this._AcceptedFileType = default(string);
					}
					this.SendPropertyChanged("BannerFileType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Banners(Banner entity)
		{
			this.SendPropertyChanging();
			entity.BannerGroup = this;
		}
		
		private void detach_Banners(Banner entity)
		{
			this.SendPropertyChanging();
			entity.BannerGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Banner")]
	public partial class Banner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BannerId;
		
		private string _ClientCode;
		
		private System.Guid _BannerGroupId;
		
		private string _Title;
		
		private System.Guid _DocumentID;
		
		private string _NavigateUrl;
		
		private int _RequestCount;
		
		private int _ClickCount;
		
		private System.DateTime _StartDateTime;
		
		private System.DateTime _EndDateTime;
		
		private bool _IsDeleted;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedDate;
		
		private System.Nullable<System.DateTime> _ModifiedDate;
		
		private EntitySet<BannerReference> _BannerReferences;
		
		private EntitySet<BannerAudit> _BannerAudits;
		
		private EntityRef<BannerGroup> _BannerGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerIdChanging(System.Guid value);
    partial void OnBannerIdChanged();
    partial void OnClientCodeChanging(string value);
    partial void OnClientCodeChanged();
    partial void OnBannerGroupIdChanging(System.Guid value);
    partial void OnBannerGroupIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDocumentIDChanging(System.Guid value);
    partial void OnDocumentIDChanged();
    partial void OnNavigateUrlChanging(string value);
    partial void OnNavigateUrlChanged();
    partial void OnRequestCountChanging(int value);
    partial void OnRequestCountChanged();
    partial void OnClickCountChanging(int value);
    partial void OnClickCountChanged();
    partial void OnStartDateTimeChanging(System.DateTime value);
    partial void OnStartDateTimeChanged();
    partial void OnEndDateTimeChanging(System.DateTime value);
    partial void OnEndDateTimeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public Banner()
		{
			this._BannerReferences = new EntitySet<BannerReference>(new Action<BannerReference>(this.attach_BannerReferences), new Action<BannerReference>(this.detach_BannerReferences));
			this._BannerAudits = new EntitySet<BannerAudit>(new Action<BannerAudit>(this.attach_BannerAudits), new Action<BannerAudit>(this.detach_BannerAudits));
			this._BannerGroup = default(EntityRef<BannerGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BannerId
		{
			get
			{
				return this._BannerId;
			}
			set
			{
				if ((this._BannerId != value))
				{
					this.OnBannerIdChanging(value);
					this.SendPropertyChanging();
					this._BannerId = value;
					this.SendPropertyChanged("BannerId");
					this.OnBannerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ClientCode
		{
			get
			{
				return this._ClientCode;
			}
			set
			{
				if ((this._ClientCode != value))
				{
					this.OnClientCodeChanging(value);
					this.SendPropertyChanging();
					this._ClientCode = value;
					this.SendPropertyChanged("ClientCode");
					this.OnClientCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerGroupId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BannerGroupId
		{
			get
			{
				return this._BannerGroupId;
			}
			set
			{
				if ((this._BannerGroupId != value))
				{
					if (this._BannerGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBannerGroupIdChanging(value);
					this.SendPropertyChanging();
					this._BannerGroupId = value;
					this.SendPropertyChanged("BannerGroupId");
					this.OnBannerGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigateUrl", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string NavigateUrl
		{
			get
			{
				return this._NavigateUrl;
			}
			set
			{
				if ((this._NavigateUrl != value))
				{
					this.OnNavigateUrlChanging(value);
					this.SendPropertyChanging();
					this._NavigateUrl = value;
					this.SendPropertyChanged("NavigateUrl");
					this.OnNavigateUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestCount", DbType="Int NOT NULL")]
		public int RequestCount
		{
			get
			{
				return this._RequestCount;
			}
			set
			{
				if ((this._RequestCount != value))
				{
					this.OnRequestCountChanging(value);
					this.SendPropertyChanging();
					this._RequestCount = value;
					this.SendPropertyChanged("RequestCount");
					this.OnRequestCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClickCount", DbType="Int NOT NULL")]
		public int ClickCount
		{
			get
			{
				return this._ClickCount;
			}
			set
			{
				if ((this._ClickCount != value))
				{
					this.OnClickCountChanging(value);
					this.SendPropertyChanging();
					this._ClickCount = value;
					this.SendPropertyChanged("ClickCount");
					this.OnClickCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartDateTime
		{
			get
			{
				return this._StartDateTime;
			}
			set
			{
				if ((this._StartDateTime != value))
				{
					this.OnStartDateTimeChanging(value);
					this.SendPropertyChanging();
					this._StartDateTime = value;
					this.SendPropertyChanged("StartDateTime");
					this.OnStartDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndDateTime
		{
			get
			{
				return this._EndDateTime;
			}
			set
			{
				if ((this._EndDateTime != value))
				{
					this.OnEndDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EndDateTime = value;
					this.SendPropertyChanged("EndDateTime");
					this.OnEndDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Banner_BannerReference", Storage="_BannerReferences", ThisKey="BannerId", OtherKey="BannerId")]
		public EntitySet<BannerReference> BannerReferences
		{
			get
			{
				return this._BannerReferences;
			}
			set
			{
				this._BannerReferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Banner_BannerAudit", Storage="_BannerAudits", ThisKey="BannerId", OtherKey="BannerId")]
		public EntitySet<BannerAudit> BannerAudits
		{
			get
			{
				return this._BannerAudits;
			}
			set
			{
				this._BannerAudits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BannerGroup_Banner", Storage="_BannerGroup", ThisKey="BannerGroupId", OtherKey="BannerGroupId", IsForeignKey=true)]
		public BannerGroup BannerGroup
		{
			get
			{
				return this._BannerGroup.Entity;
			}
			set
			{
				BannerGroup previousValue = this._BannerGroup.Entity;
				if (((previousValue != value) 
							|| (this._BannerGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BannerGroup.Entity = null;
						previousValue.Banners.Remove(this);
					}
					this._BannerGroup.Entity = value;
					if ((value != null))
					{
						value.Banners.Add(this);
						this._BannerGroupId = value.BannerGroupId;
					}
					else
					{
						this._BannerGroupId = default(System.Guid);
					}
					this.SendPropertyChanged("BannerGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BannerReferences(BannerReference entity)
		{
			this.SendPropertyChanging();
			entity.Banner = this;
		}
		
		private void detach_BannerReferences(BannerReference entity)
		{
			this.SendPropertyChanging();
			entity.Banner = null;
		}
		
		private void attach_BannerAudits(BannerAudit entity)
		{
			this.SendPropertyChanging();
			entity.Banner = this;
		}
		
		private void detach_BannerAudits(BannerAudit entity)
		{
			this.SendPropertyChanging();
			entity.Banner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BannerAudit")]
	public partial class BannerAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BannerAuditId;
		
		private System.Guid _BannerId;
		
		private string _ActionTypeName;
		
		private string _IPAddress;
		
		private string _ClientCode;
		
		private string _ApplicationName;
		
		private string _PageUrl;
		
		private string _Location;
		
		private string _UserGroup;
		
		private string _Gender;
		
		private string _Username;
		
		private System.Nullable<System.Guid> _UserId;
		
		private string _PostCode;
		
		private System.DateTime _CreatedDateTime;
		
		private EntityRef<Banner> _Banner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBannerAuditIdChanging(int value);
    partial void OnBannerAuditIdChanged();
    partial void OnBannerIdChanging(System.Guid value);
    partial void OnBannerIdChanged();
    partial void OnActionTypeNameChanging(string value);
    partial void OnActionTypeNameChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnClientCodeChanging(string value);
    partial void OnClientCodeChanged();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnPageUrlChanging(string value);
    partial void OnPageUrlChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnUserGroupChanging(string value);
    partial void OnUserGroupChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPostCodeChanging(string value);
    partial void OnPostCodeChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    #endregion
		
		public BannerAudit()
		{
			this._Banner = default(EntityRef<Banner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerAuditId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BannerAuditId
		{
			get
			{
				return this._BannerAuditId;
			}
			set
			{
				if ((this._BannerAuditId != value))
				{
					this.OnBannerAuditIdChanging(value);
					this.SendPropertyChanging();
					this._BannerAuditId = value;
					this.SendPropertyChanged("BannerAuditId");
					this.OnBannerAuditIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BannerId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BannerId
		{
			get
			{
				return this._BannerId;
			}
			set
			{
				if ((this._BannerId != value))
				{
					if (this._Banner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBannerIdChanging(value);
					this.SendPropertyChanging();
					this._BannerId = value;
					this.SendPropertyChanged("BannerId");
					this.OnBannerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionTypeName", DbType="VarChar(20)")]
		public string ActionTypeName
		{
			get
			{
				return this._ActionTypeName;
			}
			set
			{
				if ((this._ActionTypeName != value))
				{
					this.OnActionTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ActionTypeName = value;
					this.SendPropertyChanged("ActionTypeName");
					this.OnActionTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(50)")]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ClientCode
		{
			get
			{
				return this._ClientCode;
			}
			set
			{
				if ((this._ClientCode != value))
				{
					this.OnClientCodeChanging(value);
					this.SendPropertyChanging();
					this._ClientCode = value;
					this.SendPropertyChanged("ClientCode");
					this.OnClientCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="VarChar(50)")]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageUrl", DbType="VarChar(50)")]
		public string PageUrl
		{
			get
			{
				return this._PageUrl;
			}
			set
			{
				if ((this._PageUrl != value))
				{
					this.OnPageUrlChanging(value);
					this.SendPropertyChanging();
					this._PageUrl = value;
					this.SendPropertyChanged("PageUrl");
					this.OnPageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(20)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroup", DbType="VarChar(100)")]
		public string UserGroup
		{
			get
			{
				return this._UserGroup;
			}
			set
			{
				if ((this._UserGroup != value))
				{
					this.OnUserGroupChanging(value);
					this.SendPropertyChanging();
					this._UserGroup = value;
					this.SendPropertyChanged("UserGroup");
					this.OnUserGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCode", DbType="VarChar(10)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this.OnPostCodeChanging(value);
					this.SendPropertyChanging();
					this._PostCode = value;
					this.SendPropertyChanged("PostCode");
					this.OnPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Banner_BannerAudit", Storage="_Banner", ThisKey="BannerId", OtherKey="BannerId", IsForeignKey=true)]
		public Banner Banner
		{
			get
			{
				return this._Banner.Entity;
			}
			set
			{
				Banner previousValue = this._Banner.Entity;
				if (((previousValue != value) 
							|| (this._Banner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Banner.Entity = null;
						previousValue.BannerAudits.Remove(this);
					}
					this._Banner.Entity = value;
					if ((value != null))
					{
						value.BannerAudits.Add(this);
						this._BannerId = value.BannerId;
					}
					else
					{
						this._BannerId = default(System.Guid);
					}
					this.SendPropertyChanged("Banner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
