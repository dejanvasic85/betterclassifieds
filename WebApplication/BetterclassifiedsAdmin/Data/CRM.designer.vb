'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18047
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AppUserSPRESS")>  _
Partial Public Class CRMDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEmailTemplate(instance As EmailTemplate)
    End Sub
  Partial Private Sub UpdateEmailTemplate(instance As EmailTemplate)
    End Sub
  Partial Private Sub DeleteEmailTemplate(instance As EmailTemplate)
    End Sub
  Partial Private Sub InsertEmailFrom(instance As EmailFrom)
    End Sub
  Partial Private Sub UpdateEmailFrom(instance As EmailFrom)
    End Sub
  Partial Private Sub DeleteEmailFrom(instance As EmailFrom)
    End Sub
  Partial Private Sub InsertSmtpClient(instance As SmtpClient)
    End Sub
  Partial Private Sub UpdateSmtpClient(instance As SmtpClient)
    End Sub
  Partial Private Sub DeleteSmtpClient(instance As SmtpClient)
    End Sub
  Partial Private Sub Insertaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Updateaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Deleteaspnet_Application(instance As aspnet_Application)
    End Sub
  Partial Private Sub Insertaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Updateaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Deleteaspnet_Membership(instance As aspnet_Membership)
    End Sub
  Partial Private Sub Insertaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Updateaspnet_User(instance As aspnet_User)
    End Sub
  Partial Private Sub Deleteaspnet_User(instance As aspnet_User)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("Local").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property EmailTemplates() As System.Data.Linq.Table(Of EmailTemplate)
		Get
			Return Me.GetTable(Of EmailTemplate)
		End Get
	End Property
	
	Public ReadOnly Property EmailFroms() As System.Data.Linq.Table(Of EmailFrom)
		Get
			Return Me.GetTable(Of EmailFrom)
		End Get
	End Property
	
	Public ReadOnly Property SmtpClients() As System.Data.Linq.Table(Of SmtpClient)
		Get
			Return Me.GetTable(Of SmtpClient)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Applications() As System.Data.Linq.Table(Of aspnet_Application)
		Get
			Return Me.GetTable(Of aspnet_Application)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Memberships() As System.Data.Linq.Table(Of aspnet_Membership)
		Get
			Return Me.GetTable(Of aspnet_Membership)
		End Get
	End Property
	
	Public ReadOnly Property aspnet_Users() As System.Data.Linq.Table(Of aspnet_User)
		Get
			Return Me.GetTable(Of aspnet_User)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EmailTemplate")>  _
Partial Public Class EmailTemplate
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmailTemplateId As Integer
	
	Private _EmailHeader As String
	
	Private _EmailBody As String
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmailTemplateIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmailTemplateIdChanged()
    End Sub
    Partial Private Sub OnEmailHeaderChanging(value As String)
    End Sub
    Partial Private Sub OnEmailHeaderChanged()
    End Sub
    Partial Private Sub OnEmailBodyChanging(value As String)
    End Sub
    Partial Private Sub OnEmailBodyChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailTemplateId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmailTemplateId() As Integer
		Get
			Return Me._EmailTemplateId
		End Get
		Set
			If ((Me._EmailTemplateId = value)  _
						= false) Then
				Me.OnEmailTemplateIdChanging(value)
				Me.SendPropertyChanging
				Me._EmailTemplateId = value
				Me.SendPropertyChanged("EmailTemplateId")
				Me.OnEmailTemplateIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailHeader", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EmailHeader() As String
		Get
			Return Me._EmailHeader
		End Get
		Set
			If (String.Equals(Me._EmailHeader, value) = false) Then
				Me.OnEmailHeaderChanging(value)
				Me.SendPropertyChanging
				Me._EmailHeader = value
				Me.SendPropertyChanged("EmailHeader")
				Me.OnEmailHeaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailBody", DbType:="NVarChar(MAX)")>  _
	Public Property EmailBody() As String
		Get
			Return Me._EmailBody
		End Get
		Set
			If (String.Equals(Me._EmailBody, value) = false) Then
				Me.OnEmailBodyChanging(value)
				Me.SendPropertyChanging
				Me._EmailBody = value
				Me.SendPropertyChanged("EmailBody")
				Me.OnEmailBodyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(250)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EmailFrom")>  _
Partial Public Class EmailFrom
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmailFromId As Integer
	
	Private _EmailAddress As String
	
	Private _Description As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmailFromIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmailFromIdChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailFromId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmailFromId() As Integer
		Get
			Return Me._EmailFromId
		End Get
		Set
			If ((Me._EmailFromId = value)  _
						= false) Then
				Me.OnEmailFromIdChanging(value)
				Me.SendPropertyChanging
				Me._EmailFromId = value
				Me.SendPropertyChanged("EmailFromId")
				Me.OnEmailFromIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SmtpClient")>  _
Partial Public Class SmtpClient
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SmtpId As Integer
	
	Private _SmtpClient As String
	
	Private _SmtpUsername As String
	
	Private _SmtpPassword As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSmtpIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSmtpIdChanged()
    End Sub
    Partial Private Sub OnSmtpClientChanging(value As String)
    End Sub
    Partial Private Sub OnSmtpClientChanged()
    End Sub
    Partial Private Sub OnSmtpUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnSmtpUsernameChanged()
    End Sub
    Partial Private Sub OnSmtpPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnSmtpPasswordChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmtpId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SmtpId() As Integer
		Get
			Return Me._SmtpId
		End Get
		Set
			If ((Me._SmtpId = value)  _
						= false) Then
				Me.OnSmtpIdChanging(value)
				Me.SendPropertyChanging
				Me._SmtpId = value
				Me.SendPropertyChanged("SmtpId")
				Me.OnSmtpIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmtpClient", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property SmtpClient() As String
		Get
			Return Me._SmtpClient
		End Get
		Set
			If (String.Equals(Me._SmtpClient, value) = false) Then
				Me.OnSmtpClientChanging(value)
				Me.SendPropertyChanging
				Me._SmtpClient = value
				Me.SendPropertyChanged("SmtpClient")
				Me.OnSmtpClientChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmtpUsername", DbType:="NVarChar(50)")>  _
	Public Property SmtpUsername() As String
		Get
			Return Me._SmtpUsername
		End Get
		Set
			If (String.Equals(Me._SmtpUsername, value) = false) Then
				Me.OnSmtpUsernameChanging(value)
				Me.SendPropertyChanging
				Me._SmtpUsername = value
				Me.SendPropertyChanged("SmtpUsername")
				Me.OnSmtpUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SmtpPassword", DbType:="NVarChar(50)")>  _
	Public Property SmtpPassword() As String
		Get
			Return Me._SmtpPassword
		End Get
		Set
			If (String.Equals(Me._SmtpPassword, value) = false) Then
				Me.OnSmtpPasswordChanging(value)
				Me.SendPropertyChanging
				Me._SmtpPassword = value
				Me.SendPropertyChanged("SmtpPassword")
				Me.OnSmtpPasswordChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Applications")>  _
Partial Public Class aspnet_Application
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationName As String
	
	Private _LoweredApplicationName As String
	
	Private _ApplicationId As System.Guid
	
	Private _Description As String
	
	Private _aspnet_Memberships As EntitySet(Of aspnet_Membership)
	
	Private _aspnet_Users As EntitySet(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationNameChanged()
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredApplicationNameChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Memberships = New EntitySet(Of aspnet_Membership)(AddressOf Me.attach_aspnet_Memberships, AddressOf Me.detach_aspnet_Memberships)
		Me._aspnet_Users = New EntitySet(Of aspnet_User)(AddressOf Me.attach_aspnet_Users, AddressOf Me.detach_aspnet_Users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property ApplicationName() As String
		Get
			Return Me._ApplicationName
		End Get
		Set
			If (String.Equals(Me._ApplicationName, value) = false) Then
				Me.OnApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationName = value
				Me.SendPropertyChanged("ApplicationName")
				Me.OnApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredApplicationName() As String
		Get
			Return Me._LoweredApplicationName
		End Get
		Set
			If (String.Equals(Me._LoweredApplicationName, value) = false) Then
				Me.OnLoweredApplicationNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredApplicationName = value
				Me.SendPropertyChanged("LoweredApplicationName")
				Me.OnLoweredApplicationNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Memberships", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Memberships() As EntitySet(Of aspnet_Membership)
		Get
			Return Me._aspnet_Memberships
		End Get
		Set
			Me._aspnet_Memberships.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Users", ThisKey:="ApplicationId", OtherKey:="ApplicationId")>  _
	Public Property aspnet_Users() As EntitySet(Of aspnet_User)
		Get
			Return Me._aspnet_Users
		End Get
		Set
			Me._aspnet_Users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_aspnet_Memberships(ByVal entity As aspnet_Membership)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Memberships(ByVal entity As aspnet_Membership)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
	
	Private Sub attach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Me
	End Sub
	
	Private Sub detach_aspnet_Users(ByVal entity As aspnet_User)
		Me.SendPropertyChanging
		entity.aspnet_Application = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Membership")>  _
Partial Public Class aspnet_Membership
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _Password As String
	
	Private _PasswordFormat As Integer
	
	Private _PasswordSalt As String
	
	Private _MobilePIN As String
	
	Private _Email As String
	
	Private _LoweredEmail As String
	
	Private _PasswordQuestion As String
	
	Private _PasswordAnswer As String
	
	Private _IsApproved As Boolean
	
	Private _IsLockedOut As Boolean
	
	Private _CreateDate As Date
	
	Private _LastLoginDate As Date
	
	Private _LastPasswordChangedDate As Date
	
	Private _LastLockoutDate As Date
	
	Private _FailedPasswordAttemptCount As Integer
	
	Private _FailedPasswordAttemptWindowStart As Date
	
	Private _FailedPasswordAnswerAttemptCount As Integer
	
	Private _FailedPasswordAnswerAttemptWindowStart As Date
	
	Private _Comment As String
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
	Private _aspnet_User As EntityRef(Of aspnet_User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnPasswordFormatChanging(value As Integer)
    End Sub
    Partial Private Sub OnPasswordFormatChanged()
    End Sub
    Partial Private Sub OnPasswordSaltChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordSaltChanged()
    End Sub
    Partial Private Sub OnMobilePINChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePINChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnLoweredEmailChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredEmailChanged()
    End Sub
    Partial Private Sub OnPasswordQuestionChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordQuestionChanged()
    End Sub
    Partial Private Sub OnPasswordAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordAnswerChanged()
    End Sub
    Partial Private Sub OnIsApprovedChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsApprovedChanged()
    End Sub
    Partial Private Sub OnIsLockedOutChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsLockedOutChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastPasswordChangedDateChanged()
    End Sub
    Partial Private Sub OnLastLockoutDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLockoutDateChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptCountChanged()
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanging(value As Date)
    End Sub
    Partial Private Sub OnFailedPasswordAnswerAttemptWindowStartChanged()
    End Sub
    Partial Private Sub OnCommentChanging(value As String)
    End Sub
    Partial Private Sub OnCommentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		Me._aspnet_User = CType(Nothing, EntityRef(Of aspnet_User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._aspnet_User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordFormat", DbType:="Int NOT NULL")>  _
	Public Property PasswordFormat() As Integer
		Get
			Return Me._PasswordFormat
		End Get
		Set
			If ((Me._PasswordFormat = value)  _
						= false) Then
				Me.OnPasswordFormatChanging(value)
				Me.SendPropertyChanging
				Me._PasswordFormat = value
				Me.SendPropertyChanged("PasswordFormat")
				Me.OnPasswordFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordSalt", DbType:="NVarChar(128) NOT NULL", CanBeNull:=false)>  _
	Public Property PasswordSalt() As String
		Get
			Return Me._PasswordSalt
		End Get
		Set
			If (String.Equals(Me._PasswordSalt, value) = false) Then
				Me.OnPasswordSaltChanging(value)
				Me.SendPropertyChanging
				Me._PasswordSalt = value
				Me.SendPropertyChanged("PasswordSalt")
				Me.OnPasswordSaltChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePIN", DbType:="NVarChar(16)")>  _
	Public Property MobilePIN() As String
		Get
			Return Me._MobilePIN
		End Get
		Set
			If (String.Equals(Me._MobilePIN, value) = false) Then
				Me.OnMobilePINChanging(value)
				Me.SendPropertyChanging
				Me._MobilePIN = value
				Me.SendPropertyChanged("MobilePIN")
				Me.OnMobilePINChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(256)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredEmail", DbType:="NVarChar(256)")>  _
	Public Property LoweredEmail() As String
		Get
			Return Me._LoweredEmail
		End Get
		Set
			If (String.Equals(Me._LoweredEmail, value) = false) Then
				Me.OnLoweredEmailChanging(value)
				Me.SendPropertyChanging
				Me._LoweredEmail = value
				Me.SendPropertyChanged("LoweredEmail")
				Me.OnLoweredEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordQuestion", DbType:="NVarChar(256)")>  _
	Public Property PasswordQuestion() As String
		Get
			Return Me._PasswordQuestion
		End Get
		Set
			If (String.Equals(Me._PasswordQuestion, value) = false) Then
				Me.OnPasswordQuestionChanging(value)
				Me.SendPropertyChanging
				Me._PasswordQuestion = value
				Me.SendPropertyChanged("PasswordQuestion")
				Me.OnPasswordQuestionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordAnswer", DbType:="NVarChar(128)")>  _
	Public Property PasswordAnswer() As String
		Get
			Return Me._PasswordAnswer
		End Get
		Set
			If (String.Equals(Me._PasswordAnswer, value) = false) Then
				Me.OnPasswordAnswerChanging(value)
				Me.SendPropertyChanging
				Me._PasswordAnswer = value
				Me.SendPropertyChanged("PasswordAnswer")
				Me.OnPasswordAnswerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsApproved", DbType:="Bit NOT NULL")>  _
	Public Property IsApproved() As Boolean
		Get
			Return Me._IsApproved
		End Get
		Set
			If ((Me._IsApproved = value)  _
						= false) Then
				Me.OnIsApprovedChanging(value)
				Me.SendPropertyChanging
				Me._IsApproved = value
				Me.SendPropertyChanged("IsApproved")
				Me.OnIsApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLockedOut", DbType:="Bit NOT NULL")>  _
	Public Property IsLockedOut() As Boolean
		Get
			Return Me._IsLockedOut
		End Get
		Set
			If ((Me._IsLockedOut = value)  _
						= false) Then
				Me.OnIsLockedOutChanging(value)
				Me.SendPropertyChanging
				Me._IsLockedOut = value
				Me.SendPropertyChanged("IsLockedOut")
				Me.OnIsLockedOutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLoginDate() As Date
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If ((Me._LastLoginDate = value)  _
						= false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPasswordChangedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastPasswordChangedDate() As Date
		Get
			Return Me._LastPasswordChangedDate
		End Get
		Set
			If ((Me._LastPasswordChangedDate = value)  _
						= false) Then
				Me.OnLastPasswordChangedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastPasswordChangedDate = value
				Me.SendPropertyChanged("LastPasswordChangedDate")
				Me.OnLastPasswordChangedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLockoutDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLockoutDate() As Date
		Get
			Return Me._LastLockoutDate
		End Get
		Set
			If ((Me._LastLockoutDate = value)  _
						= false) Then
				Me.OnLastLockoutDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLockoutDate = value
				Me.SendPropertyChanged("LastLockoutDate")
				Me.OnLastLockoutDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAttemptCount")
				Me.OnFailedPasswordAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAttemptWindowStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAttemptWindowStart() As Date
		Get
			Return Me._FailedPasswordAttemptWindowStart
		End Get
		Set
			If ((Me._FailedPasswordAttemptWindowStart = value)  _
						= false) Then
				Me.OnFailedPasswordAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAttemptWindowStart")
				Me.OnFailedPasswordAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptCount", DbType:="Int NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptCount() As Integer
		Get
			Return Me._FailedPasswordAnswerAttemptCount
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptCount = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptCountChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptCount = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptCount")
				Me.OnFailedPasswordAnswerAttemptCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailedPasswordAnswerAttemptWindowStart", DbType:="DateTime NOT NULL")>  _
	Public Property FailedPasswordAnswerAttemptWindowStart() As Date
		Get
			Return Me._FailedPasswordAnswerAttemptWindowStart
		End Get
		Set
			If ((Me._FailedPasswordAnswerAttemptWindowStart = value)  _
						= false) Then
				Me.OnFailedPasswordAnswerAttemptWindowStartChanging(value)
				Me.SendPropertyChanging
				Me._FailedPasswordAnswerAttemptWindowStart = value
				Me.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart")
				Me.OnFailedPasswordAnswerAttemptWindowStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comment", DbType:="NText", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Comment() As String
		Get
			Return Me._Comment
		End Get
		Set
			If (String.Equals(Me._Comment, value) = false) Then
				Me.OnCommentChanging(value)
				Me.SendPropertyChanging
				Me._Comment = value
				Me.SendPropertyChanged("Comment")
				Me.OnCommentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_Membership", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Memberships.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Memberships.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property aspnet_User() As aspnet_User
		Get
			Return Me._aspnet_User.Entity
		End Get
		Set
			Dim previousValue As aspnet_User = Me._aspnet_User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_User.Entity = Nothing
					previousValue.aspnet_Membership = Nothing
				End If
				Me._aspnet_User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Membership = Me
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users")>  _
Partial Public Class aspnet_User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationId As System.Guid
	
	Private _UserId As System.Guid
	
	Private _UserName As String
	
	Private _LoweredUserName As String
	
	Private _MobileAlias As String
	
	Private _IsAnonymous As Boolean
	
	Private _LastActivityDate As Date
	
	Private _aspnet_Membership As EntityRef(Of aspnet_Membership)
	
	Private _aspnet_Application As EntityRef(Of aspnet_Application)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnLoweredUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnLoweredUserNameChanged()
    End Sub
    Partial Private Sub OnMobileAliasChanging(value As String)
    End Sub
    Partial Private Sub OnMobileAliasChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._aspnet_Membership = CType(Nothing, EntityRef(Of aspnet_Membership))
		Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				If Me._aspnet_Application.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property LoweredUserName() As String
		Get
			Return Me._LoweredUserName
		End Get
		Set
			If (String.Equals(Me._LoweredUserName, value) = false) Then
				Me.OnLoweredUserNameChanging(value)
				Me.SendPropertyChanging
				Me._LoweredUserName = value
				Me.SendPropertyChanged("LoweredUserName")
				Me.OnLoweredUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")>  _
	Public Property MobileAlias() As String
		Get
			Return Me._MobileAlias
		End Get
		Set
			If (String.Equals(Me._MobileAlias, value) = false) Then
				Me.OnMobileAliasChanging(value)
				Me.SendPropertyChanging
				Me._MobileAlias = value
				Me.SendPropertyChanged("MobileAlias")
				Me.OnMobileAliasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
	Public Property IsAnonymous() As Boolean
		Get
			Return Me._IsAnonymous
		End Get
		Set
			If ((Me._IsAnonymous = value)  _
						= false) Then
				Me.OnIsAnonymousChanging(value)
				Me.SendPropertyChanging
				Me._IsAnonymous = value
				Me.SendPropertyChanged("IsAnonymous")
				Me.OnIsAnonymousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastActivityDate() As Date
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If ((Me._LastActivityDate = value)  _
						= false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_User_aspnet_Membership", Storage:="_aspnet_Membership", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property aspnet_Membership() As aspnet_Membership
		Get
			Return Me._aspnet_Membership.Entity
		End Get
		Set
			Dim previousValue As aspnet_Membership = Me._aspnet_Membership.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Membership.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Membership.Entity = Nothing
					previousValue.aspnet_User = Nothing
				End If
				Me._aspnet_Membership.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.aspnet_User = Me
				End If
				Me.SendPropertyChanged("aspnet_Membership")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=true)>  _
	Public Property aspnet_Application() As aspnet_Application
		Get
			Return Me._aspnet_Application.Entity
		End Get
		Set
			Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._aspnet_Application.Entity = Nothing
					previousValue.aspnet_Users.Remove(Me)
				End If
				Me._aspnet_Application.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.aspnet_Users.Add(Me)
					Me._ApplicationId = value.ApplicationId
				Else
					Me._ApplicationId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("aspnet_Application")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
