'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34003
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace DataModel

    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="iFlogAppUser")> _
    Partial Public Class AppUserDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub Insertaspnet_User(instance As aspnet_User)
        End Sub
        Partial Private Sub Updateaspnet_User(instance As aspnet_User)
        End Sub
        Partial Private Sub Deleteaspnet_User(instance As aspnet_User)
        End Sub
        Partial Private Sub InsertIndustry(instance As Industry)
        End Sub
        Partial Private Sub UpdateIndustry(instance As Industry)
        End Sub
        Partial Private Sub DeleteIndustry(instance As Industry)
        End Sub
        Partial Private Sub InsertBusinessCategory(instance As BusinessCategory)
        End Sub
        Partial Private Sub UpdateBusinessCategory(instance As BusinessCategory)
        End Sub
        Partial Private Sub DeleteBusinessCategory(instance As BusinessCategory)
        End Sub
        Partial Private Sub InsertUserProfile(instance As UserProfile)
        End Sub
        Partial Private Sub UpdateUserProfile(instance As UserProfile)
        End Sub
        Partial Private Sub DeleteUserProfile(instance As UserProfile)
        End Sub
        Partial Private Sub Insertaspnet_Application(instance As aspnet_Application)
        End Sub
        Partial Private Sub Updateaspnet_Application(instance As aspnet_Application)
        End Sub
        Partial Private Sub Deleteaspnet_Application(instance As aspnet_Application)
        End Sub
#End Region

        Public Sub New()
            MyBase.New(Global.BetterclassifiedsCore.My.MySettings.Default.iFlogAppUserConnectionString, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property aspnet_Users() As System.Data.Linq.Table(Of aspnet_User)
            Get
                Return Me.GetTable(Of aspnet_User)()
            End Get
        End Property

        Public ReadOnly Property Industries() As System.Data.Linq.Table(Of Industry)
            Get
                Return Me.GetTable(Of Industry)()
            End Get
        End Property

        Public ReadOnly Property BusinessCategories() As System.Data.Linq.Table(Of BusinessCategory)
            Get
                Return Me.GetTable(Of BusinessCategory)()
            End Get
        End Property

        Public ReadOnly Property UserProfiles() As System.Data.Linq.Table(Of UserProfile)
            Get
                Return Me.GetTable(Of UserProfile)()
            End Get
        End Property

        Public ReadOnly Property aspnet_Applications() As System.Data.Linq.Table(Of aspnet_Application)
            Get
                Return Me.GetTable(Of aspnet_Application)()
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Users")> _
    Partial Public Class aspnet_User
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ApplicationId As System.Guid

        Private _UserId As System.Guid

        Private _UserName As String

        Private _LoweredUserName As String

        Private _MobileAlias As String

        Private _IsAnonymous As Boolean

        Private _LastActivityDate As Date

        Private _aspnet_Application As EntityRef(Of aspnet_Application)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnApplicationIdChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnApplicationIdChanged()
        End Sub
        Partial Private Sub OnUserIdChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnUserIdChanged()
        End Sub
        Partial Private Sub OnUserNameChanging(value As String)
        End Sub
        Partial Private Sub OnUserNameChanged()
        End Sub
        Partial Private Sub OnLoweredUserNameChanging(value As String)
        End Sub
        Partial Private Sub OnLoweredUserNameChanged()
        End Sub
        Partial Private Sub OnMobileAliasChanging(value As String)
        End Sub
        Partial Private Sub OnMobileAliasChanged()
        End Sub
        Partial Private Sub OnIsAnonymousChanging(value As Boolean)
        End Sub
        Partial Private Sub OnIsAnonymousChanged()
        End Sub
        Partial Private Sub OnLastActivityDateChanging(value As Date)
        End Sub
        Partial Private Sub OnLastActivityDateChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._aspnet_Application = CType(Nothing, EntityRef(Of aspnet_Application))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")> _
        Public Property ApplicationId() As System.Guid
            Get
                Return Me._ApplicationId
            End Get
            Set(value As System.Guid)
                If ((Me._ApplicationId = value) _
                            = False) Then
                    If Me._aspnet_Application.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnApplicationIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._ApplicationId = value
                    Me.SendPropertyChanged("ApplicationId")
                    Me.OnApplicationIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property UserId() As System.Guid
            Get
                Return Me._UserId
            End Get
            Set(value As System.Guid)
                If ((Me._UserId = value) _
                            = False) Then
                    Me.OnUserIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._UserId = value
                    Me.SendPropertyChanged("UserId")
                    Me.OnUserIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)> _
        Public Property UserName() As String
            Get
                Return Me._UserName
            End Get
            Set(value As String)
                If (String.Equals(Me._UserName, value) = False) Then
                    Me.OnUserNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._UserName = value
                    Me.SendPropertyChanged("UserName")
                    Me.OnUserNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredUserName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)> _
        Public Property LoweredUserName() As String
            Get
                Return Me._LoweredUserName
            End Get
            Set(value As String)
                If (String.Equals(Me._LoweredUserName, value) = False) Then
                    Me.OnLoweredUserNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._LoweredUserName = value
                    Me.SendPropertyChanged("LoweredUserName")
                    Me.OnLoweredUserNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileAlias", DbType:="NVarChar(16)")> _
        Public Property MobileAlias() As String
            Get
                Return Me._MobileAlias
            End Get
            Set(value As String)
                If (String.Equals(Me._MobileAlias, value) = False) Then
                    Me.OnMobileAliasChanging(value)
                    Me.SendPropertyChanging()
                    Me._MobileAlias = value
                    Me.SendPropertyChanged("MobileAlias")
                    Me.OnMobileAliasChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")> _
        Public Property IsAnonymous() As Boolean
            Get
                Return Me._IsAnonymous
            End Get
            Set(value As Boolean)
                If ((Me._IsAnonymous = value) _
                            = False) Then
                    Me.OnIsAnonymousChanging(value)
                    Me.SendPropertyChanging()
                    Me._IsAnonymous = value
                    Me.SendPropertyChanged("IsAnonymous")
                    Me.OnIsAnonymousChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")> _
        Public Property LastActivityDate() As Date
            Get
                Return Me._LastActivityDate
            End Get
            Set(value As Date)
                If ((Me._LastActivityDate = value) _
                            = False) Then
                    Me.OnLastActivityDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._LastActivityDate = value
                    Me.SendPropertyChanged("LastActivityDate")
                    Me.OnLastActivityDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Application", ThisKey:="ApplicationId", OtherKey:="ApplicationId", IsForeignKey:=True)> _
        Public Property aspnet_Application() As aspnet_Application
            Get
                Return Me._aspnet_Application.Entity
            End Get
            Set(value As aspnet_Application)
                Dim previousValue As aspnet_Application = Me._aspnet_Application.Entity
                If ((Object.Equals(previousValue, value) = False) _
                            OrElse (Me._aspnet_Application.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._aspnet_Application.Entity = Nothing
                        previousValue.aspnet_Users.Remove(Me)
                    End If
                    Me._aspnet_Application.Entity = value
                    If ((value Is Nothing) _
                                = False) Then
                        value.aspnet_Users.Add(Me)
                        Me._ApplicationId = value.ApplicationId
                    Else
                        Me._ApplicationId = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("aspnet_Application")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Industry")> _
    Partial Public Class Industry
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _IndustryId As Integer

        Private _Title As String

        Private _Description As String

        Private _BusinessCategories As EntitySet(Of BusinessCategory)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnIndustryIdChanging(value As Integer)
        End Sub
        Partial Private Sub OnIndustryIdChanged()
        End Sub
        Partial Private Sub OnTitleChanging(value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._BusinessCategories = New EntitySet(Of BusinessCategory)(AddressOf Me.attach_BusinessCategories, AddressOf Me.detach_BusinessCategories)
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property IndustryId() As Integer
            Get
                Return Me._IndustryId
            End Get
            Set(value As Integer)
                If ((Me._IndustryId = value) _
                            = False) Then
                    Me.OnIndustryIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._IndustryId = value
                    Me.SendPropertyChanged("IndustryId")
                    Me.OnIndustryIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Title() As String
            Get
                Return Me._Title
            End Get
            Set(value As String)
                If (String.Equals(Me._Title, value) = False) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(250)")> _
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(value As String)
                If (String.Equals(Me._Description, value) = False) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Industry_BusinessCategory", Storage:="_BusinessCategories", ThisKey:="IndustryId", OtherKey:="IndustryId")> _
        Public Property BusinessCategories() As EntitySet(Of BusinessCategory)
            Get
                Return Me._BusinessCategories
            End Get
            Set(value As EntitySet(Of BusinessCategory))
                Me._BusinessCategories.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_BusinessCategories(ByVal entity As BusinessCategory)
            Me.SendPropertyChanging()
            entity.Industry = Me
        End Sub

        Private Sub detach_BusinessCategories(ByVal entity As BusinessCategory)
            Me.SendPropertyChanging()
            entity.Industry = Nothing
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BusinessCategory")> _
    Partial Public Class BusinessCategory
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _BusinessCategoryId As Integer

        Private _IndustryId As Integer

        Private _Title As String

        Private _Description As String

        Private _Industry As EntityRef(Of Industry)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnBusinessCategoryIdChanging(value As Integer)
        End Sub
        Partial Private Sub OnBusinessCategoryIdChanged()
        End Sub
        Partial Private Sub OnIndustryIdChanging(value As Integer)
        End Sub
        Partial Private Sub OnIndustryIdChanged()
        End Sub
        Partial Private Sub OnTitleChanging(value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._Industry = CType(Nothing, EntityRef(Of Industry))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessCategoryId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
        Public Property BusinessCategoryId() As Integer
            Get
                Return Me._BusinessCategoryId
            End Get
            Set(value As Integer)
                If ((Me._BusinessCategoryId = value) _
                            = False) Then
                    Me.OnBusinessCategoryIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._BusinessCategoryId = value
                    Me.SendPropertyChanged("BusinessCategoryId")
                    Me.OnBusinessCategoryIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryId", DbType:="Int NOT NULL")> _
        Public Property IndustryId() As Integer
            Get
                Return Me._IndustryId
            End Get
            Set(value As Integer)
                If ((Me._IndustryId = value) _
                            = False) Then
                    If Me._Industry.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnIndustryIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._IndustryId = value
                    Me.SendPropertyChanged("IndustryId")
                    Me.OnIndustryIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Title() As String
            Get
                Return Me._Title
            End Get
            Set(value As String)
                If (String.Equals(Me._Title, value) = False) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(250)")> _
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(value As String)
                If (String.Equals(Me._Description, value) = False) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Industry_BusinessCategory", Storage:="_Industry", ThisKey:="IndustryId", OtherKey:="IndustryId", IsForeignKey:=True)> _
        Public Property Industry() As Industry
            Get
                Return Me._Industry.Entity
            End Get
            Set(value As Industry)
                Dim previousValue As Industry = Me._Industry.Entity
                If ((Object.Equals(previousValue, value) = False) _
                            OrElse (Me._Industry.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._Industry.Entity = Nothing
                        previousValue.BusinessCategories.Remove(Me)
                    End If
                    Me._Industry.Entity = value
                    If ((value Is Nothing) _
                                = False) Then
                        value.BusinessCategories.Add(Me)
                        Me._IndustryId = value.IndustryId
                    Else
                        Me._IndustryId = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Industry")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserProfile")> _
    Partial Public Class UserProfile
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _UserID As System.Guid

        Private _RefNumber As String

        Private _FirstName As String

        Private _LastName As String

        Private _Email As String

        Private _Address1 As String

        Private _Address2 As String

        Private _City As String

        Private _State As String

        Private _PostCode As String

        Private _Phone As String

        Private _SecondaryPhone As String

        Private _PreferedContact As String

        Private _BusinessName As String

        Private _ABN As String

        Private _Industry As System.Nullable(Of Integer)

        Private _BusinessCategory As System.Nullable(Of Integer)

        Private _ProfileVersion As Integer

        Private _LastUpdatedDate As Date

        Private _UserProfile1 As EntityRef(Of UserProfile)

        Private _UserProfile As EntityRef(Of UserProfile)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnUserIDChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnUserIDChanged()
        End Sub
        Partial Private Sub OnRefNumberChanging(value As String)
        End Sub
        Partial Private Sub OnRefNumberChanged()
        End Sub
        Partial Private Sub OnFirstNameChanging(value As String)
        End Sub
        Partial Private Sub OnFirstNameChanged()
        End Sub
        Partial Private Sub OnLastNameChanging(value As String)
        End Sub
        Partial Private Sub OnLastNameChanged()
        End Sub
        Partial Private Sub OnEmailChanging(value As String)
        End Sub
        Partial Private Sub OnEmailChanged()
        End Sub
        Partial Private Sub OnAddress1Changing(value As String)
        End Sub
        Partial Private Sub OnAddress1Changed()
        End Sub
        Partial Private Sub OnAddress2Changing(value As String)
        End Sub
        Partial Private Sub OnAddress2Changed()
        End Sub
        Partial Private Sub OnCityChanging(value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnStateChanging(value As String)
        End Sub
        Partial Private Sub OnStateChanged()
        End Sub
        Partial Private Sub OnPostCodeChanging(value As String)
        End Sub
        Partial Private Sub OnPostCodeChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnSecondaryPhoneChanging(value As String)
        End Sub
        Partial Private Sub OnSecondaryPhoneChanged()
        End Sub
        Partial Private Sub OnPreferedContactChanging(value As String)
        End Sub
        Partial Private Sub OnPreferedContactChanged()
        End Sub
        Partial Private Sub OnBusinessNameChanging(value As String)
        End Sub
        Partial Private Sub OnBusinessNameChanged()
        End Sub
        Partial Private Sub OnABNChanging(value As String)
        End Sub
        Partial Private Sub OnABNChanged()
        End Sub
        Partial Private Sub OnIndustryChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnIndustryChanged()
        End Sub
        Partial Private Sub OnBusinessCategoryChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnBusinessCategoryChanged()
        End Sub
        Partial Private Sub OnProfileVersionChanging(value As Integer)
        End Sub
        Partial Private Sub OnProfileVersionChanged()
        End Sub
        Partial Private Sub OnLastUpdatedDateChanging(value As Date)
        End Sub
        Partial Private Sub OnLastUpdatedDateChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._UserProfile1 = CType(Nothing, EntityRef(Of UserProfile))
            Me._UserProfile = CType(Nothing, EntityRef(Of UserProfile))
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property UserID() As System.Guid
            Get
                Return Me._UserID
            End Get
            Set(value As System.Guid)
                If ((Me._UserID = value) _
                            = False) Then
                    If Me._UserProfile.HasLoadedOrAssignedValue Then
                        Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
                    End If
                    Me.OnUserIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._UserID = value
                    Me.SendPropertyChanged("UserID")
                    Me.OnUserIDChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RefNumber", DbType:="NVarChar(20)")> _
        Public Property RefNumber() As String
            Get
                Return Me._RefNumber
            End Get
            Set(value As String)
                If (String.Equals(Me._RefNumber, value) = False) Then
                    Me.OnRefNumberChanging(value)
                    Me.SendPropertyChanging()
                    Me._RefNumber = value
                    Me.SendPropertyChanged("RefNumber")
                    Me.OnRefNumberChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)> _
        Public Property FirstName() As String
            Get
                Return Me._FirstName
            End Get
            Set(value As String)
                If (String.Equals(Me._FirstName, value) = False) Then
                    Me.OnFirstNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._FirstName = value
                    Me.SendPropertyChanged("FirstName")
                    Me.OnFirstNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)> _
        Public Property LastName() As String
            Get
                Return Me._LastName
            End Get
            Set(value As String)
                If (String.Equals(Me._LastName, value) = False) Then
                    Me.OnLastNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._LastName = value
                    Me.SendPropertyChanged("LastName")
                    Me.OnLastNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property Email() As String
            Get
                Return Me._Email
            End Get
            Set(value As String)
                If (String.Equals(Me._Email, value) = False) Then
                    Me.OnEmailChanging(value)
                    Me.SendPropertyChanging()
                    Me._Email = value
                    Me.SendPropertyChanged("Email")
                    Me.OnEmailChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="NVarChar(75) NOT NULL", CanBeNull:=False)> _
        Public Property Address1() As String
            Get
                Return Me._Address1
            End Get
            Set(value As String)
                If (String.Equals(Me._Address1, value) = False) Then
                    Me.OnAddress1Changing(value)
                    Me.SendPropertyChanging()
                    Me._Address1 = value
                    Me.SendPropertyChanged("Address1")
                    Me.OnAddress1Changed()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="NVarChar(75)")> _
        Public Property Address2() As String
            Get
                Return Me._Address2
            End Get
            Set(value As String)
                If (String.Equals(Me._Address2, value) = False) Then
                    Me.OnAddress2Changing(value)
                    Me.SendPropertyChanging()
                    Me._Address2 = value
                    Me.SendPropertyChanged("Address2")
                    Me.OnAddress2Changed()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
        Public Property City() As String
            Get
                Return Me._City
            End Get
            Set(value As String)
                If (String.Equals(Me._City, value) = False) Then
                    Me.OnCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._City = value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="NVarChar(20) NOT NULL", CanBeNull:=False)> _
        Public Property State() As String
            Get
                Return Me._State
            End Get
            Set(value As String)
                If (String.Equals(Me._State, value) = False) Then
                    Me.OnStateChanging(value)
                    Me.SendPropertyChanging()
                    Me._State = value
                    Me.SendPropertyChanged("State")
                    Me.OnStateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(10) NOT NULL", CanBeNull:=False)> _
        Public Property PostCode() As String
            Get
                Return Me._PostCode
            End Get
            Set(value As String)
                If (String.Equals(Me._PostCode, value) = False) Then
                    Me.OnPostCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._PostCode = value
                    Me.SendPropertyChanged("PostCode")
                    Me.OnPostCodeChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(12) NOT NULL", CanBeNull:=False)> _
        Public Property Phone() As String
            Get
                Return Me._Phone
            End Get
            Set(value As String)
                If (String.Equals(Me._Phone, value) = False) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecondaryPhone", DbType:="NVarChar(12)")> _
        Public Property SecondaryPhone() As String
            Get
                Return Me._SecondaryPhone
            End Get
            Set(value As String)
                If (String.Equals(Me._SecondaryPhone, value) = False) Then
                    Me.OnSecondaryPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._SecondaryPhone = value
                    Me.SendPropertyChanged("SecondaryPhone")
                    Me.OnSecondaryPhoneChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PreferedContact", DbType:="NVarChar(12)")> _
        Public Property PreferedContact() As String
            Get
                Return Me._PreferedContact
            End Get
            Set(value As String)
                If (String.Equals(Me._PreferedContact, value) = False) Then
                    Me.OnPreferedContactChanging(value)
                    Me.SendPropertyChanging()
                    Me._PreferedContact = value
                    Me.SendPropertyChanged("PreferedContact")
                    Me.OnPreferedContactChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessName", DbType:="NVarChar(75)")> _
        Public Property BusinessName() As String
            Get
                Return Me._BusinessName
            End Get
            Set(value As String)
                If (String.Equals(Me._BusinessName, value) = False) Then
                    Me.OnBusinessNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._BusinessName = value
                    Me.SendPropertyChanged("BusinessName")
                    Me.OnBusinessNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ABN", DbType:="NVarChar(12)")> _
        Public Property ABN() As String
            Get
                Return Me._ABN
            End Get
            Set(value As String)
                If (String.Equals(Me._ABN, value) = False) Then
                    Me.OnABNChanging(value)
                    Me.SendPropertyChanging()
                    Me._ABN = value
                    Me.SendPropertyChanged("ABN")
                    Me.OnABNChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Industry", DbType:="Int")> _
        Public Property Industry() As System.Nullable(Of Integer)
            Get
                Return Me._Industry
            End Get
            Set(value As System.Nullable(Of Integer))
                If (Me._Industry.Equals(value) = False) Then
                    Me.OnIndustryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Industry = value
                    Me.SendPropertyChanged("Industry")
                    Me.OnIndustryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessCategory", DbType:="Int")> _
        Public Property BusinessCategory() As System.Nullable(Of Integer)
            Get
                Return Me._BusinessCategory
            End Get
            Set(value As System.Nullable(Of Integer))
                If (Me._BusinessCategory.Equals(value) = False) Then
                    Me.OnBusinessCategoryChanging(value)
                    Me.SendPropertyChanging()
                    Me._BusinessCategory = value
                    Me.SendPropertyChanged("BusinessCategory")
                    Me.OnBusinessCategoryChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProfileVersion", DbType:="Int NOT NULL")> _
        Public Property ProfileVersion() As Integer
            Get
                Return Me._ProfileVersion
            End Get
            Set(value As Integer)
                If ((Me._ProfileVersion = value) _
                            = False) Then
                    Me.OnProfileVersionChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProfileVersion = value
                    Me.SendPropertyChanged("ProfileVersion")
                    Me.OnProfileVersionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")> _
        Public Property LastUpdatedDate() As Date
            Get
                Return Me._LastUpdatedDate
            End Get
            Set(value As Date)
                If ((Me._LastUpdatedDate = value) _
                            = False) Then
                    Me.OnLastUpdatedDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._LastUpdatedDate = value
                    Me.SendPropertyChanged("LastUpdatedDate")
                    Me.OnLastUpdatedDateChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserProfile_UserProfile", Storage:="_UserProfile1", ThisKey:="UserID", OtherKey:="UserID", IsUnique:=True, IsForeignKey:=False)> _
        Public Property UserProfile1() As UserProfile
            Get
                Return Me._UserProfile1.Entity
            End Get
            Set(value As UserProfile)
                Dim previousValue As UserProfile = Me._UserProfile1.Entity
                If ((Object.Equals(previousValue, value) = False) _
                            OrElse (Me._UserProfile1.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._UserProfile1.Entity = Nothing
                        previousValue.UserProfile = Nothing
                    End If
                    Me._UserProfile1.Entity = value
                    If (Object.Equals(value, Nothing) = False) Then
                        value.UserProfile = Me
                    End If
                    Me.SendPropertyChanged("UserProfile1")
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserProfile_UserProfile", Storage:="_UserProfile", ThisKey:="UserID", OtherKey:="UserID", IsForeignKey:=True)> _
        Public Property UserProfile() As UserProfile
            Get
                Return Me._UserProfile.Entity
            End Get
            Set(value As UserProfile)
                Dim previousValue As UserProfile = Me._UserProfile.Entity
                If ((Object.Equals(previousValue, value) = False) _
                            OrElse (Me._UserProfile.HasLoadedOrAssignedValue = False)) Then
                    Me.SendPropertyChanging()
                    If ((previousValue Is Nothing) _
                                = False) Then
                        Me._UserProfile.Entity = Nothing
                        previousValue.UserProfile1 = Nothing
                    End If
                    Me._UserProfile.Entity = value
                    If ((value Is Nothing) _
                                = False) Then
                        value.UserProfile1 = Me
                        Me._UserID = value.UserID
                    Else
                        Me._UserID = CType(Nothing, System.Guid)
                    End If
                    Me.SendPropertyChanged("UserProfile")
                End If
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.aspnet_Applications")> _
    Partial Public Class aspnet_Application
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ApplicationName As String

        Private _LoweredApplicationName As String

        Private _ApplicationId As System.Guid

        Private _Description As String

        Private _aspnet_Users As EntitySet(Of aspnet_User)

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnApplicationNameChanging(value As String)
        End Sub
        Partial Private Sub OnApplicationNameChanged()
        End Sub
        Partial Private Sub OnLoweredApplicationNameChanging(value As String)
        End Sub
        Partial Private Sub OnLoweredApplicationNameChanged()
        End Sub
        Partial Private Sub OnApplicationIdChanging(value As System.Guid)
        End Sub
        Partial Private Sub OnApplicationIdChanged()
        End Sub
        Partial Private Sub OnDescriptionChanging(value As String)
        End Sub
        Partial Private Sub OnDescriptionChanged()
        End Sub
#End Region

        Public Sub New()
            MyBase.New()
            Me._aspnet_Users = New EntitySet(Of aspnet_User)(AddressOf Me.attach_aspnet_Users, AddressOf Me.detach_aspnet_Users)
            OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)> _
        Public Property ApplicationName() As String
            Get
                Return Me._ApplicationName
            End Get
            Set(value As String)
                If (String.Equals(Me._ApplicationName, value) = False) Then
                    Me.OnApplicationNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ApplicationName = value
                    Me.SendPropertyChanged("ApplicationName")
                    Me.OnApplicationNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoweredApplicationName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=False)> _
        Public Property LoweredApplicationName() As String
            Get
                Return Me._LoweredApplicationName
            End Get
            Set(value As String)
                If (String.Equals(Me._LoweredApplicationName, value) = False) Then
                    Me.OnLoweredApplicationNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._LoweredApplicationName = value
                    Me.SendPropertyChanged("LoweredApplicationName")
                    Me.OnLoweredApplicationNameChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=True)> _
        Public Property ApplicationId() As System.Guid
            Get
                Return Me._ApplicationId
            End Get
            Set(value As System.Guid)
                If ((Me._ApplicationId = value) _
                            = False) Then
                    Me.OnApplicationIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._ApplicationId = value
                    Me.SendPropertyChanged("ApplicationId")
                    Me.OnApplicationIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")> _
        Public Property Description() As String
            Get
                Return Me._Description
            End Get
            Set(value As String)
                If (String.Equals(Me._Description, value) = False) Then
                    Me.OnDescriptionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Description = value
                    Me.SendPropertyChanged("Description")
                    Me.OnDescriptionChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="aspnet_Application_aspnet_User", Storage:="_aspnet_Users", ThisKey:="ApplicationId", OtherKey:="ApplicationId")> _
        Public Property aspnet_Users() As EntitySet(Of aspnet_User)
            Get
                Return Me._aspnet_Users
            End Get
            Set(value As EntitySet(Of aspnet_User))
                Me._aspnet_Users.Assign(value)
            End Set
        End Property

        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If ((Me.PropertyChangingEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
            If ((Me.PropertyChangedEvent Is Nothing) _
                        = False) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_aspnet_Users(ByVal entity As aspnet_User)
            Me.SendPropertyChanging()
            entity.aspnet_Application = Me
        End Sub

        Private Sub detach_aspnet_Users(ByVal entity As aspnet_User)
            Me.SendPropertyChanging()
            entity.aspnet_Application = Nothing
        End Sub
    End Class
End Namespace
